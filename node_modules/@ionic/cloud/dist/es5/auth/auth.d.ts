import { PromiseWithNotify } from '../core/promise';
import { IStorageStrategy } from '../core/storage';
import { User } from '../core/user';
export interface ITokenContext {
    storage: IStorageStrategy;
    label: string;
    delete(): void;
    store(token: string): void;
    getRawData(): string;
}
export declare class TempTokenContext implements ITokenContext {
    storage: IStorageStrategy;
    constructor();
    label: string;
    delete(): void;
    store(token: string): void;
    getRawData(): string;
}
export declare class TokenContext implements ITokenContext {
    storage: IStorageStrategy;
    constructor();
    label: string;
    delete(): void;
    store(token: string): void;
    getRawData(): string;
}
export interface LoginOptions {
    remember?: boolean;
}
export declare class Auth {
    static isAuthenticated(): boolean;
    static login(moduleId: any, options: LoginOptions, data: any): PromiseWithNotify<User>;
    static signup(data: any): any;
    static logout(): void;
    static register(moduleId: any, module: any): void;
    static getUserToken(): string;
}
